package com.ryonday.marvel;

import com.google.common.base.Charsets;
import com.google.common.hash.Hashing;
import com.ryonday.marvel.api.Marvel;
import com.ryonday.marvel.api.MarvelConstants;
import com.ryonday.marvel.api.data.*;
import com.ryonday.marvel.config.MarvelConfig;
import org.glassfish.jersey.filter.LoggingFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import javax.inject.Inject;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.MediaType;
import java.util.UUID;

/**
 * A Jackson implementation of the {@link com.ryonday.marvel.api.Marvel} interface.
 */
public class DefaultMarvel implements Marvel {

    /** SLF4J Logger */
    private final static Logger LOG = LoggerFactory.getLogger( DefaultMarvel.class );

    /** The specific {@code WebTarget} to use with this {@code DefaultMarvel} instance. */
    private final WebTarget target;

    /** The configuration object for this {@code DefaultMarvel} instance */
    private final MarvelConfig config;

    /**
     * Constructs a new {@code DefaultMarvel} instance with the specified configuration object.
     *
     * @param config the non-null {@link com.ryonday.marvel.config.MarvelConfig} object to use with this {@code DefautlMarvel}.
     */
    @Inject
    public DefaultMarvel( @Nonnull MarvelConfig config ) {
        this.config = config;
        this.target = ClientBuilder.newBuilder()
                .build()
                .target(MarvelConstants.url_base)
                .queryParam(
                       MarvelConstants.query_apiKey,
                        config.getPublicKey())
                .register( new LoggingFilter(java.util.logging.Logger.getLogger( LoggingFilter.class.getName()), true ) )
                .register( new MarvelMapperProvider());
    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getCharacter(int)
     */
    @Override
    public ApiReturn<MarvelCharacter> getCharacter( int characterId ) {
        WebTarget t = target.path(MarvelConstants.path_chars)
                .path(Integer.toString(characterId));
        return call( t, new GenericType<ApiReturn<MarvelCharacter>>(){});

    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getCreator(int)
     */
    @Override
    public ApiReturn<Creator> getCreator( int creatorId ) {
        WebTarget t = target.path(MarvelConstants.path_creators)
                .path(Integer.toString(creatorId));
        return call( t, new GenericType<ApiReturn<Creator>>(){});

    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getComic(int)
     */
    @Override
    public ApiReturn<Comic> getComic( int comicId ) {
        WebTarget t = target.path(MarvelConstants.path_comics )
                .path(Integer.toString(comicId));
        return call( t, new GenericType<ApiReturn<Comic>>(){});

    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getEvent(int)
     */
    @Override
    public ApiReturn<Event> getEvent( int eventId ) {
        WebTarget t = target.path(MarvelConstants.path_events )
                .path(Integer.toString(eventId));
        return call( t, new GenericType<ApiReturn<Event>>(){});
    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getStory(int)
     */
    @Override
    public ApiReturn<Story> getStory( int storyId ) {
        WebTarget t = target.path(MarvelConstants.path_stories )
                .path(Integer.toString(storyId));
        return call( t, new GenericType<ApiReturn<Story>>(){});
    }

    /**
     * @see com.ryonday.marvel.api.Marvel#getSeries(int)
     */
    @Override
    public ApiReturn<Series> getSeries( int seriesId ) {
        WebTarget t = target.path(MarvelConstants.path_series )
                .path(Integer.toString(seriesId));
        return call( t, new GenericType<ApiReturn<Series>>(){});
    }


    private <T extends CoreEntity> ApiReturn<T> call( WebTarget t, GenericType<ApiReturn<T>> x ) {
        Invocation i = updateTargetWithHash( t ).request(MediaType.APPLICATION_JSON_TYPE).buildGet();

        ApiReturn<T> ret = i.invoke(x);
        return ret;
    }

    /**
     * Builds and returns a new {@code WebTarget} with the required authentication information.
     *
     * @return
     */
    private WebTarget updateTargetWithHash( WebTarget t ) {
        String ts = UUID.randomUUID().toString();
        String hash = hash( config.getPublicKey(), config.getPrivateKey(), ts);
        return t.queryParam(MarvelConstants.query_timeStamp, ts ).queryParam(MarvelConstants.query_hash, hash);
    }
    /**
     * A function that implements Marvel's signing strategy for server-side requests, the MD5Sum of the concatenation of a nonce (generated by this method), {@pubKey} and {@code privKey}.
     *
     * @param pubKey The user's public key to the Marvel web service.
     * @param privKey The user's private key to the Marvel web service.
     * @param ts a request-specific string (not really a nonce in this case) such as a timestamp or other random-ish String.
     * @return a {@code String} which serves as a signature to the Marvel web service request.
     */
    private static String hash( String pubKey, String privKey, String ts ) {

        String hash = Hashing.md5().hashString( ts + privKey + pubKey, Charsets.UTF_8 ).toString();

        LOG.debug( "Generated authentication hash '{}' from public key '{}', private key '{}' and ts '{}'",
                hash, pubKey, privKey, ts );

        return hash;
    }

}
